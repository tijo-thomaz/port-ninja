name: Build and Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.18

      - name: Run build script
        shell: pwsh
        run: .\build.ps1
        continue-on-error: true  # Continue to allow debugging even if build fails

      - name: Debug output
        run: |
          echo "Listing contents of build/release directory:"
          if [ -d "./build/release" ]; then
            ls -R ./build/release
          else
            echo "Build artifact directory not found."
          fi
        if: always()  
        # Always execute the debugging step, even if the previous step failed

      - name: Upload Linux artifact
        uses: actions/upload-artifact@v2
        with:
          name: port_ninja_linux_amd64
          path: ./build/release/linux/port_ninja_linux_amd64

      - name: Upload macOS artifact
        uses: actions/upload-artifact@v2
        with:
          name: port_ninja_darwin_amd64
          path: ./build/release/darwin/port_ninja_darwin_amd64

      - name: Upload Windows artifact
        uses: actions/upload-artifact@v2
        with:
          name: port_ninja_windows_amd64.exe
          path: ./build/release/windows/port_ninja_windows_amd64.exe

  release:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download Linux binaries
        uses: actions/download-artifact@v2
        with:
          name: port_ninja_linux_amd64
          path: ./build/release/linux

      - name: Download macOS binaries
        uses: actions/download-artifact@v2
        with:
          name: port_ninja_darwin_amd64
          path: ./build/release/darwin

      - name: Download Windows binaries
        uses: actions/download-artifact@v2
        with:
          name: port_ninja_windows_amd64.exe
          path: ./build/release/windows

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            Release notes for ${{ github.ref }}
            # Add release notes here
          draft: false
          prerelease: false

      - name: Upload Linux Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/release/linux/port_ninja_linux_amd64
          asset_name: port_ninja_linux_amd64
          asset_content_type: application/octet-stream

      - name: Upload macOS Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/release/darwin/port_ninja_darwin_amd64
          asset_name: port_ninja_darwin_amd64
          asset_content_type: application/octet-stream

      - name: Upload Windows Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/release/windows/port_ninja_windows_amd64.exe
          asset_name: port_ninja_windows_amd64.exe
          asset_content_type: application/octet-stream
